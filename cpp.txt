1.b)


#include <iostream>
#include <fstream>
#include <string>
#include <filesystem>

using namespace std;
namespace fs = std::filesystem;

void copyFile(const string& sourcePath, const string& destPath) {
    ifstream src(sourcePath, ios::binary);
    ofstream dest(destPath, ios::binary);
    if (!src) {
        cout << "Error: Could not open source file " << sourcePath << endl;
        return;
    }
    if (!dest) {
        cout << "Error: Could not open destination file " << destPath << endl;
        return;
    }
    dest << src.rdbuf();
    cout << "File copied from " << sourcePath << " to " << destPath << endl;
}

void editFile(const string& filePath) {
    ofstream file(filePath, ios::app);
    if (!file) {
        cout << "Error: Could not open file for editing " << filePath << endl;
        return;
    }
    string newText;
    cout << "Enter text to append to the file: ";
    cin.ignore(); // Clear the input buffer
    getline(cin, newText);
    file << newText << endl;
    cout << "Text appended to file: " << filePath << endl;
}

void renameFile(const string& oldName, const string& newName) {
    try {
        fs::rename(oldName, newName);
        cout << "File renamed from " << oldName << " to " << newName << endl;
    } catch (const std::exception& e) {
        cout << "Error: " << e.what() << endl;
    }
}

int main() {
    int choice;
    string sourcePath, destPath, filePath, newName;

    while (true) {
        cout << "\nFile Operations Menu:\n";
        cout << "1. Copy File\n";
        cout << "2. Edit File\n";
        cout << "3. Rename File\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter source file path: ";
                cin.ignore(); // Clear the input buffer
                getline(cin, sourcePath);
                cout << "Enter destination file path: ";
                getline(cin, destPath);
                copyFile(sourcePath, destPath);
                break;
            case 2:
                cout << "Enter file path to edit: ";
                cin.ignore(); // Clear the input buffer
                getline(cin, filePath);
                editFile(filePath);
                break;
            case 3:
                cout << "Enter current file name (with path): ";
                cin.ignore(); // Clear the input buffer
                getline(cin, filePath);
                cout << "Enter new file name (with path): ";
                getline(cin, newName);
                renameFile(filePath, newName);
                break;
            case 4:
                cout << "Exiting program.\n";
                return 0;
            default:
                cout << "Invalid choice. Please try again.\n";
                break;
        }
    }

    return 0;
}

--------------------------------------------------------------

2.b)

// 1.ii)C++ program for implementation of FCFS 
// scheduling
#include<iostream>
using namespace std;
void findWaitingTime(int processes[], int n, int bt[], int wt[])
{
	// waiting time for first process is 0
	wt[0] = 0;

	// calculating waiting time
	for (int i = 1; i < n ; i++ )
		wt[i] = bt[i-1] + wt[i-1] ;
}

// Function to calculate turn around time
void findTurnAroundTime( int processes[], int n, int bt[], int wt[], int tat[])
{
	// calculating turnaround time by adding
	// bt[i] + wt[i]
	for (int i = 0; i < n ; i++)
		tat[i] = bt[i] + wt[i];
}

//Function to calculate average time
void findavgTime( int processes[], int n, int bt[])
{
	int wt[n], tat[n], total_wt = 0, total_tat = 0;
	findWaitingTime(processes, n, bt, wt);
	findTurnAroundTime(processes, n, bt, wt, tat);
	cout << "Processes "<< " Burst time "<< " Waiting time " << " Turn around time\n";
	for (int i=0; i<n; i++)
	{
		total_wt = total_wt + wt[i];
		total_tat = total_tat + tat[i];
		cout << " " << i+1 << "\t\t" << bt[i] <<"\t "<< wt[i] <<"\t\t " << tat[i] <<endl;
	}

	cout << "Average waiting time = "<< (float)total_wt / (float)n;
	cout << "\nAverage turn around time = "<< (float)total_tat / (float)n;
}

// Driver code
int main()
{
	//process id's
	int processes[] = { 1, 2, 3,4,5};
	int n = sizeof processes / sizeof processes[0];

	//Burst time of all processes
	int burst_time[] = {2,8,4,6,2};

	findavgTime(processes, n, burst_time);
	return 0;
}

--------------------------------------------------------------

3.b)
// FCFS Disk Scheduling algorithm

#include <bits/stdc++.h>
using namespace std;

int size = 8;

void FCFS(int arr[], int head)
{
	int seek_count = 0;
	int distance, cur_track;

	for (int i = 0; i < size; i++) {
		cur_track = arr[i];
		distance = abs(cur_track - head);
		seek_count += distance;
		head = cur_track;
	}

	cout << "Total number of seek operations = "<< seek_count << endl;
	cout << "Seek Sequence is" << endl;

	for (int i = 0; i < size; i++) {
		cout << arr[i] << endl;
	}
}

// Driver code
int main()
{

	// request array
	int arr[size] = { 176, 79, 34, 60, 92, 11, 41, 114 };
	int head = 50;

	FCFS(arr, head);

	return 0;
}

--------------------------------------------------------------

4.b)

#include <iostream>
#include <queue>
#include <thread>
#include <mutex>
#include <condition_variable>

std::queue<int> buffer;
std::mutex mtx;
std::condition_variable cv;

void producer() {
   for (int i = 1; i <= 5; ++i) {
      std::lock_guard<std::mutex> lock(mtx);
      buffer.push(i);
      std::cout << "Produced: " << i << std::endl;
      cv.notify_one();
      std::this_thread::sleep_for(std::chrono::milliseconds(500));
   }
}

void consumer() {
   while (true) {
      std::unique_lock<std::mutex> lock(mtx);
      cv.wait(lock, [] { return !buffer.empty(); });
      int data = buffer.front();
      buffer.pop();
      std::cout << "Consumed: " << data << std::endl;
      lock.unlock();
      std::this_thread::sleep_for(std::chrono::milliseconds(1000));
   }
}

int main() {
   std::thread producerThread(producer);
   std::thread consumerThread(consumer);
    
   producerThread.join();
   consumerThread.join();

   return 0;
}

--------------------------------------------------------------

5.b)

// 5.b)implementation of FIFO page replacement 
// in Operating Systems. 
#include<bits/stdc++.h> 
using namespace std; 
int pageFaults(int pages[], int n, int capacity) 
{ 
	unordered_set<int> s; 
	queue<int> indexes; 
	int page_faults = 0; 
	for (int i=0; i<n; i++) 
	{
		if (s.size() < capacity) 
		{ 
			if (s.find(pages[i])==s.end()) 
			{ 
				s.insert(pages[i]); 
				page_faults++; 
				indexes.push(pages[i]); 
			} 
		} 
		else
		{ 
			if (s.find(pages[i]) == s.end()) 
			{ 
				int val = indexes.front(); 
				indexes.pop(); 
				s.erase(val); 
				s.insert(pages[i]); 
				indexes.push(pages[i]); 
				page_faults++; 
			} 
		} 
	} 

	return page_faults; 
} 
int main() 
{ 
	int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 
				2, 3, 0, 3, 2}; 
	int n = sizeof(pages)/sizeof(pages[0]); 
	int capacity = 4; 
	cout << pageFaults(pages, n, capacity); 
	return 0; 
}

--------------------------------------------------------------

6.b)

//6.b)Sjf CPU scheduling 

#include <iostream>
using namespace std;

int main() {
	int A[100][4];
	int i, j, n, total = 0, index, temp;
	float avg_wt, avg_tat;
	cout << "Enter number of process: ";
	cin >> n;

	cout << "Enter Burst Time:" << endl;
	for (i = 0; i < n; i++) {
		A[i][0] = i + 1;
		cout << "P" << i + 1 << ": ";
		cin >> A[i][1];
	}
	for (i = 0; i < n; i++) {
		index = i;
		for (j = i + 1; j < n; j++)
			if (A[j][1] < A[index][1])
				index = j;
		temp = A[i][1];
		A[i][1] = A[index][1];
		A[index][1] = temp;

		temp = A[i][0];
		A[i][0] = A[index][0];
		A[index][0] = temp;
	}

	A[0][2] = 0;
	// Calculation of Waiting Times
	for (i = 1; i < n; i++) {
// 		A[i][2] = 0;
// 		for (j = 0; j < i; j++)
// 			A[i][2] += A[j][1];
        A[i][2]=A[i-1][1]+A[i-1][2];
		total += A[i][2];
	}

	avg_wt = (float)total / n;
	total = 0;
	cout << "P	 BT	 WT	 TAT" << endl;
	for (i = 0; i < n; i++) {
		A[i][3] = A[i][1] + A[i][2];
		total += A[i][3];
		cout << "P" << A[i][0] << "	 " << A[i][1] << "	 " << A[i][2] << "	 " << A[i][3] << endl;
	}

	avg_tat = (float)total / n;
	cout << "Average Waiting Time= " << avg_wt << endl;
	cout << "Average Turnaround Time= " << avg_tat << endl;
}

--------------------------------------------------------------

7.b)

//7.b) Banker's Algorithm
#include <iostream>
using namespace std;

int main()
{
    // P0, P1, P2, P3, P4 are the Process names here

  int n, m, i, j, k;
  n = 5; // Number of processes
  m = 3; // Number of resources
  int alloc[5][3] = { { 0, 1, 0 }, // P0 // Allocation Matrix
                     { 2, 0, 0 }, // P1
                     { 3, 0, 2 }, // P2
                     { 2, 1, 1 }, // P3
                     { 0, 0, 2 } }; // P4

  int max[5][3] = { { 7, 5, 3 }, // P0 // MAX Matrix
                   { 3, 2, 2 }, // P1
                   { 9, 0, 2 }, // P2
                   { 2, 2, 2 }, // P3
                   { 4, 3, 3 } }; // P4

  int avail[3] = { 3, 3, 2 }; // Available Resources

  int f[n], ans[n], ind = 0;
  for (k = 0; k < n; k++) {
    f[k] = 0;
  }
  int need[n][m];
  for (i = 0; i < n; i++) {
    for (j = 0; j < m; j++)
      need[i][j] = max[i][j] - alloc[i][j];
  }
  int y = 0;
  for (k = 0; k < 5; k++) {
    for (i = 0; i < n; i++) {
      if (f[i] == 0) {

        int flag = 0;
        for (j = 0; j < m; j++) {
          if (need[i][j] > avail[j]){
            flag = 1;
            break;
          }
        }

        if (flag == 0) {
          ans[ind++] = i;
          for (y = 0; y < m; y++)
            avail[y] += alloc[i][y];
          f[i] = 1;
        }
      }
    }
  }
  
  int flag = 1;
  
  // To check if sequence is safe or not
  for(int i = 0;i<n;i++)
  {
        if(f[i]==0)
      {
        flag = 0;
        cout << "The given sequence is not safe";
        break;
      }
  }

  if(flag==1)
  {
    cout << "Following is the SAFE Sequence" << endl;
      for (i = 0; i < n - 1; i++)
        cout << " P" << ans[i] << " ->";
      cout << " P" << ans[n - 1] <<endl;
  }

    return (0);
}

--------------------------------------------------------------

8.b)

//8.b) C++ program for implementation of FCFS using priority
// scheduling 
#include <bits/stdc++.h> 
using namespace std; 

struct Process { 
	int pid; // Process ID 
	int bt; // CPU Burst time required 
	int priority; // Priority of this process 
}; 

// Function to sort the Process acc. to priority 
bool comparison(Process a, Process b) 
{ 
	return (a.priority > b.priority); 
} 

// Function to find the waiting time for all 
// processes 
void findWaitingTime(Process proc[], int n, int wt[]) 
{ 
	// waiting time for first process is 0 
	wt[0] = 0; 

	// calculating waiting time 
	for (int i = 1; i < n; i++) 
		wt[i] = proc[i - 1].bt + wt[i - 1]; 
} 

// Function to calculate turn around time 
void findTurnAroundTime(Process proc[], int n, int wt[], 
						int tat[]) 
{ 
	// calculating turnaround time by adding 
	// bt[i] + wt[i] 
	for (int i = 0; i < n; i++) 
		tat[i] = proc[i].bt + wt[i]; 
} 

// Function to calculate average time 
void findavgTime(Process proc[], int n) 
{ 
	int wt[n], tat[n], total_wt = 0, total_tat = 0; 

	// Function to find waiting time of all processes 
	findWaitingTime(proc, n, wt); 

	// Function to find turn around time for all processes 
	findTurnAroundTime(proc, n, wt, tat); 

	// Display processes along with all details 
	cout << "\nProcesses "
		<< " Burst time "
		<< " Waiting time "
		<< " Turn around time\n"; 

	// Calculate total waiting time and total turn 
	// around time 
	for (int i = 0; i < n; i++) { 
		total_wt = total_wt + wt[i]; 
		total_tat = total_tat + tat[i]; 
		cout << " " << proc[i].pid << "\t\t" << proc[i].bt 
			<< "\t " << wt[i] << "\t\t " << tat[i] 
			<< endl; 
	} 

	cout << "\nAverage waiting time = "
		<< (float)total_wt / (float)n; 
	cout << "\nAverage turn around time = "
		<< (float)total_tat / (float)n; 
} 

void priorityScheduling(Process proc[], int n) 
{ 
	// Sort processes by priority 
	sort(proc, proc + n, comparison); 

	cout << "Order in which processes gets executed \n"; 
	for (int i = 0; i < n; i++) 
		cout << proc[i].pid << " "; 

	findavgTime(proc, n); 
} 

// Driver code 
int main() 
{ 
	Process proc[] 
		= { { 1, 10, 2 }, { 2, 5, 0 }, { 3, 8, 1 } }; 
	int n = sizeof proc / sizeof proc[0]; 
	priorityScheduling(proc, n); 
	return 0; 
}

--------------------------------------------------------------

